#include<stdio.h>
#include<CONIO.h>
#include<string.h>
#include<alloc.h>



struct Node{
int data;
struct Node *pLeft;
struct Node *pRight;
};

void menu(void);
struct Node* createNode(int d);
struct Node* insertNode(struct Node* pNode ,int d);
int inOrder(struct Node* pNode);
//void preOrder(struct Node* pNode);
//void postOrder(struct Node* pNode);

int main(){
struct Node *pRoot=NULL;
int d;
char ch;
char n[20];
int y=1;
int a,b;
int flag=0;
int j=1;
clrscr();
menu();
do{
ch = getch();
if(ch == 0){
ch = getch();
if (ch==72){
if(y>1)
gotoxy(1,--y);
}
else if (ch==80){

if(y<5)
gotoxy(1,++y);
}
else if (ch==71){
gotoxy(1,1);
y=1;
}
}else{
if(ch==13){
if(y==1 && flag==0){
clrscr();
printf("Please enter your id: ");
scanf("%d",&d);
pRoot = insertNode(pRoot,d);
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==2 && flag==0){
clrscr();
inOrder(pRoot);
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==3 && flag==0){
clrscr();
preOrder(pRoot);
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==4 && flag==0){
clrscr();
postOrder(pRoot);
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==5){
j=0;
}
}else if(ch==27){
j=0;
}
else if(ch==55){//cause home needs two buttons
y=1;
gotoxy(1,1);
}
}

}while(j != 0);

return 0;
}
void menu(){
gotoxy(1,1);
printf("1-ADD to Tree\n");
gotoxy(1,2);
printf("2-Print in order\n");
gotoxy(1,3);
printf("3-Print pre order\n");
gotoxy(1,4);
printf("4-Print post order\n");
gotoxy(1,5);
printf("5-Exit\n");
gotoxy(1,1);
}


struct Node* createNode(int d){

	struct Node* ptr;
	ptr = (struct Node *) malloc(sizeof(struct Node));
	if(ptr){
	ptr->data=d;
	ptr->pLeft=NULL;
	ptr->pRight=NULL;
	}
	return ptr;
}


struct Node* insertNode(struct Node* pNode,int d){

	int flag=0;
	if(pNode==NULL){
		flag = 1;
		pNode = createNode(d);
	}
	else if(pNode->data >= d){
		flag = 1;
		pNode->pLeft = insertNode(pNode->pLeft,d);
	}
	else{
        	flag =1;
		pNode->pRight = insertNode(pNode->pRight,d);
	}
        printf("%d",flag);
	return pNode;

}

int inOrder(struct Node* pNode){

	int retval=0;

	if(pNode){

		retval =1;
		inOrder(pNode->pLeft);
		printf("%d",pNode->data);
		inOrder(pNode->pRight);
	}
	return retval;

}

int preOrder(struct Node* pNode){

	int retval=0;

	if(pNode){

		retval =1;
		printf("%d",pNode->data);
		preOrder(pNode->pLeft);
		preOrder(pNode->pRight);
	}
	return retval;

}

int postOrder(struct Node* pNode){

	int retval=0;

	if(pNode){

		retval =1;
		postOrder(pNode->pLeft);
		postOrder(pNode->pRight);
		printf("%d",pNode->data);


	}
	return retval;

}
