#include<stdio.h>
#include<CONIO.h>
#include<string.h>
#include<alloc.h>

struct student{
int id;
char name[20];
int grade[3];
};

struct Node{
struct student std;
struct Node *pPrev;
struct Node *pNext;
};

struct Node *pHead, *pTail;

void menu(void);
struct Node* createNode(struct student s);
int addNode(void);
struct student fillStudent(void);
void printStudent(struct student s);
void print(void);
void searchByID(int id);
void searchByName(char n[]);
int insertNode(void);
void freelist(void);
int deleteNode(int loc);

int main(){
struct student s;
char ch;
char n[20];
int id;
int loc;
int y=1;
int a,b;
int flag=0;
int j=1;
clrscr();
menu();
do{
ch = getch();
if(ch == 0){
ch = getch();
if (ch==72){
if(y>1)
gotoxy(1,--y);
}
else if (ch==80){

if(y<8)
gotoxy(1,++y);
}
else if (ch==71){
gotoxy(1,1);
y=1;
}
}else{
if(ch==13){
if(y==1 && flag==0){
clrscr();
addNode();
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==2 && flag==0){
clrscr();
print();
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==3 && flag==0){
clrscr();
printf("enter the id:\n");
scanf("%d",&id);
searchByID(id);
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==4 && flag==0){
clrscr();
printf("enter the name:\n");
scanf("%s",n);
searchByName(n);
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==5 && flag==0){
clrscr();
insertNode();
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==6 && flag==0){
clrscr();
freelist();
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==7 && flag==0){
clrscr();
printf("enter the loc to be deleted:\n");
scanf("%d",&loc);
deleteNode(loc);
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==8){
j=0;
}
}else if(ch==27){
j=0;
}
else if(ch==55){//cause home needs two buttons
y=1;
gotoxy(1,1);
}
}

}while(j != 0);

return 0;
}
void menu(){
gotoxy(1,1);
printf("1-ADD Node\n");
gotoxy(1,2);
printf("2-Print All Nodes\n");
gotoxy(1,3);
printf("3-Search by ID\n");
gotoxy(1,4);
printf("4-Search by Name\n");
gotoxy(1,5);
printf("5-Insert Node\n");
gotoxy(1,6);
printf("6-free\n");
gotoxy(1,7);
printf("7-Delete node\n");
gotoxy(1,8);
printf("8-EXIT");
gotoxy(1,1);
}
struct student fillStudent(void)
{
	int i;
	struct student s;
	printf("Enter id of Student: ");
	scanf("%d",&s.id);
	printf("\nEnter name of Student: ");
	scanf("%s",s.name);
	for (i=0;i<3;i++){
	printf("\nEnter the %d  grade of Student: ",i+1);
	scanf("%d",&s.grade[i]);
}
	return s;

}

struct Node* createNode(struct student s){

	struct Node* ptr;
	ptr = (struct Node *) malloc(sizeof(struct Node));
	if(ptr){
	ptr->std = s;
	ptr->pPrev = NULL;
	ptr->pNext=NULL;
}
	return ptr;
}

int addNode(void){

	int retval =0;
	struct Node *ptr;
	struct student s;
	s = fillStudent();
	ptr = createNode(s);
	if(ptr){
	retval=1;
	if(pHead==NULL){
	pHead = pTail = ptr;
	}
	else{
	pTail->pNext=ptr;
	ptr->pPrev=pTail;
	pTail=ptr;
	}
	}

	return retval;

}
int insertNode(void){
	int retval=0,i,loc;
	struct Node* ptr, *pcur;
	struct student s;
	printf("Enter location to insert in:");
	scanf("%d",&loc);
	s = fillStudent();
	ptr= createNode(s);
	if(ptr){
	retval=1;
	if(pHead==NULL){
	pHead = pTail = ptr;
	}
	else{
	if(loc==0){
	ptr->pNext = pHead;
	pHead->pPrev = ptr;
	pHead = ptr;

	}
	else{
	pcur=pHead;
	for(i=0;i<loc-1 && pcur;i++){
	pcur=pcur->pNext;
	}
	if(pcur==pTail||pcur==NULL){ //last node
	pTail->pNext=ptr;
	ptr->pPrev = pTail;
	pTail = ptr;
	}
	else{ //middle
	(pcur->pNext)->pPrev=ptr;
	ptr->pNext=pcur->pNext;
	ptr->pPrev=pcur;
	pcur->pNext=ptr;

	}
	}
	}
	return retval;
	}

}
void freelist(){
	struct Node* temp;
	while(pHead){
	temp = pHead;
	pHead = pHead->pNext;
	free(temp);
	}
	pTail = NULL;
}
void print(){

	struct Node* ptr;
	struct student s;
	if(pHead){
	ptr=pHead;
	while(ptr){
	printStudent(ptr->std);
	ptr = ptr->pNext;
		  }
		 }

}
void printStudent(struct student s){

	int i;
	printf("\nId of student= %d",s.id);
	for (i=0;i<3;i++){
	printf("\nThe %d  grade of Student: %d ",i+1,s.grade[i]);
			 }
	printf("\nThe name of Student: %s",s.name);
}
void searchByID(int id){

	struct Node* ptr=NULL;
	if(pHead){
	ptr = pHead;
	while(ptr->std.id!=id && ptr){
	ptr = ptr->pNext;
	}
	if(ptr==NULL){
	printf("No match");
	}
	else{
	printStudent(ptr->std);
	}
	}

}

void searchByName(char n[]){

	struct Node* ptr=NULL;
	int cmp=1;
	if(pHead){
	ptr = pHead;
	while(cmp!=0 && ptr){
	cmp = strcmp(ptr->std.name,n);

	if(cmp!=0){

	ptr = ptr->pNext;

	}
	}
	if(ptr==NULL){
	printf("No match");
	}
	else{
	printStudent(ptr->std);
	}
	}


}
int deleteNode(int loc){
	int retval=0,i;
	struct Node* ptr;
	struct student s;
	if(pHead){
	ptr=pHead;
	if(loc==0){
	if(pHead==pTail){
	pHead = pTail = NULL;
	}
	else{
	pHead=pHead->pNext;
	pHead->pPrev=NULL;
	}
	free(ptr);
	retval=1;
	}
	else{
	for(i=0;i<loc&&ptr;i++){
	ptr = ptr->pNext;
	}
	if(ptr){
	if(ptr==pTail){
	pTail=pTail->pPrev;
	pTail->pNext=NULL;
	}
	else{
	ptr->pPrev->pNext=ptr->pNext;
	ptr->pNext->pPrev=ptr->pPrev;
	}
	free(ptr);
	retval=1;
	}
	}
	}
	return retval;
}
