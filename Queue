#include<stdio.h>
#include<CONIO.h>
#include<string.h>
#include<alloc.h>

struct student{
int id;
char name[20];
int grade[3];
};
int first,last;
struct student std[10];
void menu(void);
struct student fillStudent(void);
void printStudent(struct student s[]);
void print(void);
int inQueue(void);
int deQueue(void);

int main(){

char ch;
int y=1;
int a,b;
int flag=0;
int j=1;

clrscr();
menu();
do{
ch = getch();
if(ch == 0){
ch = getch();
if (ch==72){
if(y>1)
gotoxy(1,--y);
}
else if (ch==80){

if(y<4)
gotoxy(1,++y);
}
else if (ch==71){
gotoxy(1,1);
y=1;
}
}else{
if(ch==13){
if(y==1 && flag==0){   //push in queue
clrscr();
inQueue();
clrscr();
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==2 && flag==0){ //pop from queue
clrscr();
deQueue();
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==3 && flag==0){  //print
clrscr();
printStudent(std);
printf("\nPress enter to get back to menu");
flag=1;
ch = getch();
y=1;
if(ch){
clrscr();
menu();
}
flag=0;
}
else if(y==4){
j=0;
}
}else if(ch==27){
j=0;
}
else if(ch==55){//cause home needs two buttons
y=1;
gotoxy(1,1);
}
}

}while(j != 0);

return 0;
}
void menu(){
gotoxy(1,1);
printf("1-InQueue\n");
gotoxy(1,2);
printf("2-Dequeue\n");
gotoxy(1,3);
printf("3-Print\n");
gotoxy(1,4);
printf("4-EXIT");
gotoxy(1,1);
}
struct student fillStudent(void)
{
	int i;
	struct student s;
	printf("Enter id of Student: ");
	scanf("%d",&s.id);
	printf("\nEnter name of Student: ");
	scanf("%s",s.name);
	for (i=0;i<3;i++){
	printf("\nEnter the %d  grade of Student: ",i+1);
	scanf("%d",&s.grade[i]);
}
	return s;

}


void printStudent(struct student s[]){
	int i,j;
	for(j=first;j<last;j++){

	printf("\nId of student= %d",s[j].id);
	for (i=0;i<3;i++){
	printf("\nThe %d  grade of Student: %d ",i+1,s[j].grade[i]);
			 }
	printf("\nThe name of Student: %s",s[j].name);
	}
}
int inQueue(void){
	int retval=0;
	struct student s;
	s = fillStudent();
	if(last<10){
	std[last]= s;
	last++;
	retval=1;
	}
	return retval;
}

int deQueue(void){
	int j;
	int retval=-1;
	while(first<last){
	std[first] = std[first+1];
	first++;
	}
	last--;
	first=0;
	return retval;

}

